{
	"info": {
		"_postman_id": "f40d5886-066b-4f34-88f9-344cf38bdc7e",
		"name": "Postman.HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26169805"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// parse token from response",
							"let token = pm.response.json().token",
							"",
							"// set token_env var",
							"pm.environment.set(\"token\", token);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "John",
							"type": "text"
						},
						{
							"key": "password",
							"value": "Doe",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"// 1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 2) Проверка структуры json в ответе.",
							"",
							"let request_raw = JSON.parse(pm.request.body.raw)",
							"",
							"let schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [",
							"        \"person\",",
							"        \"qa_salary_after_12_months\",",
							"        \"qa_salary_after_6_months\",",
							"        \"start_qa_salary\"",
							"    ],",
							"    \"properties\": {",
							"        \"person\": {",
							"            \"type\": \"object\",",
							"            \"required\" : [",
							"                \"u_age\",",
							"                \"u_name\",",
							"                \"u_salary_1_5_year\"",
							"            ],",
							"            \"properties\":{",
							"                \"u_age\": {\"type\" : \"integer\"},",
							"                \"u_name\": {\"type\": \"array\"},",
							"                \"u_salary_1_5_year\": {\"type\": \"integer\"},",
							"                \"u_salary\": {\"type\": \"integer\"",
							"                }",
							"",
							"            }",
							"        },",
							"        \"qa_salary_after_12_months\": {\"type\": \"number\"},",
							"        \"qa_salary_after_6_months\": {\"type\": \"integer\"},",
							"        \"start_qa_salary\": {\"type\": \"integer\"}",
							"    }",
							"}",
							"",
							"pm.test(\"Scheme is correct\", function () {",
							"    pm.response.to.have.jsonSchema(schema)",
							"});",
							"",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"",
							"let respJson = pm.response.json()",
							"",
							"pm.test(\"Server logic (multiplication factor) works \", function () {",
							"        pm.expect(respJson.person.u_salary_1_5_year).to.eql(request_raw.salary*4),",
							"        pm.expect(respJson.start_qa_salary).to.eql(request_raw.salary),",
							"        pm.expect(respJson.qa_salary_after_12_months).to.eql(request_raw.salary*2.9),",
							"        pm.expect(respJson.qa_salary_after_6_months).to.eql(request_raw.salary*2)",
							"});",
							"",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса ***/get_test_user",
							"pm.environment.set(\"salary_get_test_user\", respJson.person.u_salary_1_5_year);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\": 25,\n    \"salary\": 1000,\n    \"name\": \"John\",\n    \"auth_token\":\"{{token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// 1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2) Проверка структуры json в ответе.",
							"let schema = {",
							"    \"type\": \"object\",",
							"    \"requred\": [",
							"        \"age\",",
							"        \"name\",",
							"        \"salary\"",
							"    ],",
							"    \"properties\": {",
							"        \"age\" : {\"type\": \"integer\"},",
							"        \"name\" : {\"type\": \"string\"},",
							"        \"salary\" : {\"type\": \"array\"},",
							"    }",
							"}",
							"pm.test(\"Scheme is correct\", function () {",
							"    pm.response.to.have.jsonSchema(schema)",
							"});",
							"",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"let respJson = pm.response.json()",
							"let request_raw = pm.request.body.formdata.get(\"salary\")",
							"",
							"pm.test(\"Server logic (multiplication factor) works \", function () {",
							"        pm.expect(respJson.salary[0]).to.eql+(request_raw.salary),",
							"        pm.expect(respJson.salary[1]).to.eql+(request_raw.salary*2),",
							"        pm.expect(respJson.salary[2]).to.eql+(request_raw.salary*3)",
							"",
							"});",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го",
							"pm.test(\"2nd array element > 1 and 0 \", function () {",
							"        pm.expect(respJson.salary[2]).to.gt+(respJson.salary[0])",
							"        pm.expect(+respJson.salary[2]).to.be.above(+respJson.salary[1])",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "John",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// 1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 2) Проверка структуры json в ответе.",
							"let schema = {",
							"    \"type\": \"object\",",
							"    \"requred\": [",
							"        \"age\",",
							"        \"name\",",
							"        \"daily_food\",",
							"        \"daily_sleep\"",
							"    ],",
							"    \"properties\": {",
							"        \"age\" : {\"type\": \"integer\"},",
							"        \"name\" : {\"type\": \"string\"},",
							"        \"daily_food\" : {\"type\": \"number\"},",
							"        \"daily_sleep\" : {\"type\": \"number\"},",
							"    }",
							"}",
							"pm.test(\"Scheme is correct\", function () {",
							"    pm.response.to.have.jsonSchema(schema)",
							"});",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"let respJson = pm.response.json()",
							"let request_raw = pm.request.body.formdata.get(\"weight\")",
							"",
							"pm.test(\"Server logic (multiplication weight factor) works \", function () {",
							"        pm.expect(respJson.daily_food).to.eql(request_raw*0.012),",
							"        pm.expect(respJson.daily_sleep).to.eql(request_raw*2.5)",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "3",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "5",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Catty",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 2) Проверка структуры json в ответе.",
							"let schema = {",
							"    \"type\": \"object\",",
							"    \"requred\": [",
							"        \"age\",",
							"        \"family\",",
							"        \"name\",",
							"        \"salary\"",
							"    ],",
							"    \"properties\": {",
							"        \"age\" : {\"type\": \"string\"},",
							"        \"family\" : {\"type\": \"object\", \"required\": [\"children\", \"u_salary_1_5_year\" ], \"properties\": { \"children\" : { \"type\": \"array\"}, \"u_salary_1_5_year\" : {\"type\" : \"integer\"}}},",
							"        \"name\" : {\"type\": \"string\"},",
							"        \"salary\" : {\"type\": \"integer\"},",
							"    }",
							"}",
							"",
							"pm.test(\"Scheme is correct\", function () {",
							"    pm.response.to.have.jsonSchema(schema)",
							"});",
							"",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения",
							"let respJson = pm.response.json()",
							"// let request_raw = pm.request.body.formdata.get(\"weight\")",
							"pm.environment.set(\"name\", \"John\");",
							"pm.test(\"Resp name = var name from env \", function () {",
							"        pm.expect(respJson.name).to.eql(pm.environment.get(\"name\"))",
							"});",
							"",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age",
							"pm.environment.set(\"age\", 25);",
							"pm.test(\"Resp age = var age from env \", function () {",
							"        pm.expect(respJson.age).to.eql+(pm.environment.get(\"age\"))",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "John",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function getRandomInt(max) {",
							"  return Math.floor(Math.random() * max);",
							"}",
							"",
							"var random_num = getRandomInt(118)",
							"",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.",
							"",
							"//команда для отладки",
							"// console.log(random_num)",
							"",
							"// парсим ответ",
							"let request_info = pm.response.json()",
							"// забираем из ответа нужный рандомный айди",
							"let Info_from_curr = request_info[random_num].Cur_ID",
							"",
							"pm.environment.set(\"Cur_ID\", Info_from_curr);",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url_alt}}/currency",
					"host": [
						"{{url_alt}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 2) Проверка структуры json в ответе.",
							"let scheme = {",
							"    \"type\": \"object\",",
							"    \"required\": [ \"Cur_Abbreviation\", \"Cur_ID\", \"Cur_Name\", \"Cur_OfficialRate\", \"Cur_Scale\", \"Date\"],",
							"    \"properties\": { \"Cur_Abbreviation\": {\"type\" : \"string\"}, \"Cur_ID\":{\"type\":\"integer\"}, \"Cur_Name\":{\"type\":\"string\"}, \"Cur_OfficialRate\":{\"type\":\"number\"}, \"Cur_Scale\":{\"type\":\"integer\"}, \"Date\":{\"type\": \"string\", \"format\": \"date\"}",
							"    }",
							"}",
							"pm.test(\"Response json scheme is ok\", function () {",
							"    pm.response.to.have.jsonSchema(scheme)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"user-agent": true,
					"accept": true,
					"accept-encoding": true,
					"connection": true
				}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "123",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url_alt}}/curr_byn",
					"host": [
						"{{url_alt}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_7(js)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) получить список валют",
							"// 2) итерировать список валют",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты",
							"// 4) если возвращается 500 код, переходим к следующей итреации",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"",
							"// 6) если поле есть, пишем в консоль инфу про фалюту в виде response",
							"// {",
							"//     \"Cur_Abbreviation\": str",
							"//     \"Cur_ID\": int,",
							"//     \"Cur_Name\": str,",
							"//     \"Cur_OfficialRate\": float,",
							"//     \"Cur_Scale\": int,",
							"//     \"Date\": str",
							"// }",
							"// 7) переходим к следующей итерации",
							"",
							"var info = pm.response.json()",
							"let data1 = info.length",
							"",
							"for (var index = 0; index < data1; index++){",
							"    var new_id = info[index].Cur_ID",
							"    var connection = {",
							"    url: pm.environment.get(\"url_alt\")+'/curr_byn',",
							"    method: 'POST',",
							"    header: {'Postman-Token': '23a390b7-9bb2-4ddb-8715-b9d3240a49bd', ",
							"            'Host':'54.157.99.22:80', ",
							"            'Content-Type':'multipart/form-data boundary=--------------------------924870078785244570813508', ",
							"            'Content-Length':'278'}, ",
							"    body: {",
							"        mode: 'formdata',",
							"        formdata: [ {'key': 'auth_token', 'value': 123},",
							"                    {'key': 'curr_code', 'value': new_id}",
							"                 ]",
							"        }",
							"};",
							"     pm.sendRequest(connection, function (err, res) {",
							"                if(res.code == 200){",
							"                var jsonData = res.json();",
							"                    if(pm.expect(jsonData).to.have.any.keys(\"Cur_OfficialRate\")){",
							"                    console.log(jsonData);}",
							"                }}",
							")",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"connection": true,
					"accept-encoding": true,
					"accept": true,
					"user-agent": true
				}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url_alt}}/currency",
					"host": [
						"{{url_alt}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "variable_key",
			"value": ""
		},
		{
			"key": "/s34lfgbj/John/jjd909/41265kjkWpqc4307Doe152527evny",
			"value": ""
		},
		{
			"key": "/s34lfgbj/John/jjd909/91518kjkWpqc3849Doe227386evny",
			"value": ""
		},
		{
			"key": "/s34lfgbj/John/jjd909/26099kjkWpqc5319Doe266937evny",
			"value": ""
		}
	]
}